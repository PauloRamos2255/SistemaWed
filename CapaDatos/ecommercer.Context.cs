//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ecommerce2024Entities : DbContext
    {
        public ecommerce2024Entities()
            : base("name=ecommerce2024Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CARRITO> CARRITO { get; set; }
        public virtual DbSet<CATEGORIA> CATEGORIA { get; set; }
        public virtual DbSet<CLIENTE> CLIENTE { get; set; }
        public virtual DbSet<DETALLE_VENTA> DETALLE_VENTA { get; set; }
        public virtual DbSet<MARCA> MARCA { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
        public virtual DbSet<VENTA> VENTA { get; set; }
        public virtual DbSet<DEPARTAMENTO> DEPARTAMENTO { get; set; }
        public virtual DbSet<DISTRITO> DISTRITO { get; set; }
        public virtual DbSet<PROVINCIA> PROVINCIA { get; set; }
    
        [DbFunction("ecommerce2024Entities", "fn_ListarComprar")]
        public virtual IQueryable<fn_ListarComprar_Result> fn_ListarComprar(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ListarComprar_Result>("[ecommerce2024Entities].[fn_ListarComprar](@IdCliente)", idClienteParameter);
        }
    
        [DbFunction("ecommerce2024Entities", "fn_ObtenerCarritoCliente")]
        public virtual IQueryable<fn_ObtenerCarritoCliente_Result> fn_ObtenerCarritoCliente(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ObtenerCarritoCliente_Result>("[ecommerce2024Entities].[fn_ObtenerCarritoCliente](@IdCliente)", idClienteParameter);
        }
    
        public virtual ObjectResult<ListarMarcaProducto_Result> ListarMarcaProducto(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarMarcaProducto_Result>("ListarMarcaProducto", idCategoriaParameter);
        }
    
        public virtual ObjectResult<ListarProducto_Result> ListarProducto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarProducto_Result>("ListarProducto");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CantidadCarrito(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CantidadCarrito", idClienteParameter);
        }
    
        public virtual int sp_EditarCategoria(Nullable<int> idCategoria, string descripcion, Nullable<bool> activo, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarCategoria", idCategoriaParameter, descripcionParameter, activoParameter, mensaje, resultado);
        }
    
        public virtual int sp_EditarMarca(Nullable<int> idMarca, string descripcion, Nullable<bool> activo, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarMarca", idMarcaParameter, descripcionParameter, activoParameter, mensaje, resultado);
        }
    
        public virtual int sp_EditarUsuario(Nullable<int> idUsuario, string nombres, string apellidos, string correo, Nullable<bool> activo, Nullable<int> idRol, string numero, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarUsuario", idUsuarioParameter, nombresParameter, apellidosParameter, correoParameter, activoParameter, idRolParameter, numeroParameter, mensaje, resultado);
        }
    
        public virtual int sp_EliminarCarrito(Nullable<int> idCliente, Nullable<int> idProducto, ObjectParameter resultado)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarCarrito", idClienteParameter, idProductoParameter, resultado);
        }
    
        public virtual int sp_EliminarCategoria(Nullable<int> idCategoria, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarCategoria", idCategoriaParameter, mensaje, resultado);
        }
    
        public virtual int sp_EliminarMarca(Nullable<int> idMarca, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarMarca", idMarcaParameter, mensaje, resultado);
        }
    
        public virtual int sp_EliminarProducto(Nullable<int> idProducto, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarProducto", idProductoParameter, mensaje, resultado);
        }
    
        public virtual int sp_ExisteCarrito(Nullable<int> idCliente, Nullable<int> idProducto, ObjectParameter resultado)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ExisteCarrito", idClienteParameter, idProductoParameter, resultado);
        }
    
        public virtual int sp_InsertarVenta(Nullable<int> idCliente, Nullable<int> totalProducto, Nullable<decimal> montoTotal, string contacto, string idDistrito, string telefono, string direccion, string idTransaccion, Nullable<int> idProducto, Nullable<int> cantidad, Nullable<decimal> total, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var totalProductoParameter = totalProducto.HasValue ?
                new ObjectParameter("TotalProducto", totalProducto) :
                new ObjectParameter("TotalProducto", typeof(int));
    
            var montoTotalParameter = montoTotal.HasValue ?
                new ObjectParameter("MontoTotal", montoTotal) :
                new ObjectParameter("MontoTotal", typeof(decimal));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var idDistritoParameter = idDistrito != null ?
                new ObjectParameter("IdDistrito", idDistrito) :
                new ObjectParameter("IdDistrito", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idTransaccionParameter = idTransaccion != null ?
                new ObjectParameter("IdTransaccion", idTransaccion) :
                new ObjectParameter("IdTransaccion", typeof(string));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarVenta", idClienteParameter, totalProductoParameter, montoTotalParameter, contactoParameter, idDistritoParameter, telefonoParameter, direccionParameter, idTransaccionParameter, idProductoParameter, cantidadParameter, totalParameter, mensaje, resultado);
        }
    
        public virtual int sp_OperacionCarrito(Nullable<int> idCliente, Nullable<int> idProducto, Nullable<bool> sumar, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var sumarParameter = sumar.HasValue ?
                new ObjectParameter("Sumar", sumar) :
                new ObjectParameter("Sumar", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OperacionCarrito", idClienteParameter, idProductoParameter, sumarParameter, mensaje, resultado);
        }
    
        public virtual int sp_RegistarCliente(string nombres, string apellidos, string coreo, string clave, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var coreoParameter = coreo != null ?
                new ObjectParameter("Coreo", coreo) :
                new ObjectParameter("Coreo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistarCliente", nombresParameter, apellidosParameter, coreoParameter, claveParameter, mensaje, resultado);
        }
    
        public virtual int sp_RegistrarCategoria(string descripcion, Nullable<bool> activo, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarCategoria", descripcionParameter, activoParameter, mensaje, resultado);
        }
    
        public virtual int sp_RegistrarMarca(string descripcion, Nullable<bool> activo, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarMarca", descripcionParameter, activoParameter, mensaje, resultado);
        }
    
        public virtual int sp_RegistrarProducto(string nombre, string descripciopn, Nullable<int> idMarca, Nullable<int> idCategoria, Nullable<decimal> precio, Nullable<int> stock, Nullable<bool> activo, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripciopnParameter = descripciopn != null ?
                new ObjectParameter("Descripciopn", descripciopn) :
                new ObjectParameter("Descripciopn", typeof(string));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarProducto", nombreParameter, descripciopnParameter, idMarcaParameter, idCategoriaParameter, precioParameter, stockParameter, activoParameter, mensaje, resultado);
        }
    
        public virtual int sp_RegistrarUsuario(string nombres, string apellidos, string correo, string clave, Nullable<bool> activo, Nullable<int> idRol, string numero, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarUsuario", nombresParameter, apellidosParameter, correoParameter, claveParameter, activoParameter, idRolParameter, numeroParameter, mensaje, resultado);
        }
    
        public virtual ObjectResult<sp_ReporteDashboard_Result> sp_ReporteDashboard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReporteDashboard_Result>("sp_ReporteDashboard");
        }
    
        public virtual ObjectResult<sp_ReporteVentas_Result> sp_ReporteVentas(string fechainicio, string fechafin, string idTransaccion)
        {
            var fechainicioParameter = fechainicio != null ?
                new ObjectParameter("fechainicio", fechainicio) :
                new ObjectParameter("fechainicio", typeof(string));
    
            var fechafinParameter = fechafin != null ?
                new ObjectParameter("fechafin", fechafin) :
                new ObjectParameter("fechafin", typeof(string));
    
            var idTransaccionParameter = idTransaccion != null ?
                new ObjectParameter("idTransaccion", idTransaccion) :
                new ObjectParameter("idTransaccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReporteVentas_Result>("sp_ReporteVentas", fechainicioParameter, fechafinParameter, idTransaccionParameter);
        }
    
        public virtual int usp_EditarProducto(Nullable<int> idProducto, string nombre, string descripcion, Nullable<int> idMarca, Nullable<int> idCategoria, Nullable<decimal> precio, Nullable<int> stock, Nullable<bool> activo, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EditarProducto", idProductoParameter, nombreParameter, descripcionParameter, idMarcaParameter, idCategoriaParameter, precioParameter, stockParameter, activoParameter, mensaje, resultado);
        }
    
        public virtual int usp_InsertarVenta(Nullable<int> idCliente, Nullable<int> totalProducto, Nullable<decimal> montoTotal, string contacto, string idDistrito, string telefono, string direccion, string idTransaccion, ObjectParameter mensaje, ObjectParameter resultado)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var totalProductoParameter = totalProducto.HasValue ?
                new ObjectParameter("TotalProducto", totalProducto) :
                new ObjectParameter("TotalProducto", typeof(int));
    
            var montoTotalParameter = montoTotal.HasValue ?
                new ObjectParameter("MontoTotal", montoTotal) :
                new ObjectParameter("MontoTotal", typeof(decimal));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var idDistritoParameter = idDistrito != null ?
                new ObjectParameter("IdDistrito", idDistrito) :
                new ObjectParameter("IdDistrito", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idTransaccionParameter = idTransaccion != null ?
                new ObjectParameter("IdTransaccion", idTransaccion) :
                new ObjectParameter("IdTransaccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertarVenta", idClienteParameter, totalProductoParameter, montoTotalParameter, contactoParameter, idDistritoParameter, telefonoParameter, direccionParameter, idTransaccionParameter, mensaje, resultado);
        }
    
        public virtual int usp_RegistrarVenta(Nullable<int> idCliente, Nullable<int> totalProducto, Nullable<decimal> montoTotal, string contacto, string idDistrito, string telefono, string direccion, string idTransaccion, ObjectParameter resultado, ObjectParameter mensaje)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var totalProductoParameter = totalProducto.HasValue ?
                new ObjectParameter("TotalProducto", totalProducto) :
                new ObjectParameter("TotalProducto", typeof(int));
    
            var montoTotalParameter = montoTotal.HasValue ?
                new ObjectParameter("MontoTotal", montoTotal) :
                new ObjectParameter("MontoTotal", typeof(decimal));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var idDistritoParameter = idDistrito != null ?
                new ObjectParameter("IdDistrito", idDistrito) :
                new ObjectParameter("IdDistrito", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idTransaccionParameter = idTransaccion != null ?
                new ObjectParameter("IdTransaccion", idTransaccion) :
                new ObjectParameter("IdTransaccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RegistrarVenta", idClienteParameter, totalProductoParameter, montoTotalParameter, contactoParameter, idDistritoParameter, telefonoParameter, direccionParameter, idTransaccionParameter, resultado, mensaje);
        }
    }
}
